{"version":3,"sources":["Effects.js","index.js"],"names":["Effects","composer","useRef","useThree","scene","gl","size","camera","useEffect","current","setSize","width","height","useFrame","render","ref","args","attachArray","kernelRadius","maxDistance","FXAAShader","renderToScreen","extend","EffectComposer","ShaderPass","RenderPass","SSAOPass","UnrealBloomPass","tempObject","THREE","tempColor","data","Array","from","length","color","niceColors","Math","floor","random","scale","Boxes","useState","hovered","set","colorArray","useMemo","Float32Array","fill","flatMap","_","i","toArray","meshRef","prevRef","state","time","clock","getElapsedTime","rotation","x","sin","y","z","id","position","Current","geometry","attributes","needsUpdate","lerp","setScalar","updateMatrix","setMatrixAt","matrix","instanceMatrix","onPointerMove","e","instanceId","onPointerOut","undefined","attachObject","vertexColors","ReactDOM","linear","antialias","alpha","near","far","onCreated","setClearColor","intensity","document","getElementById"],"mappings":"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","file":"static/js/main.184a36ca.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport { extend, useThree, useFrame } from '@react-three/fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { SSAOPass } from 'three/examples/jsm/postprocessing/SSAOPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\n\nextend({ EffectComposer, ShaderPass, RenderPass, SSAOPass, UnrealBloomPass })\n\nexport default function Effects() {\n  const composer = useRef()\n  const { scene, gl, size, camera } = useThree()\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  useFrame(() => composer.current.render(), 2)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      <sSAOPass attachArray=\"passes\" args={[scene, camera]} kernelRadius={0.4} maxDistance={0.03} />\n      <shaderPass\n        attachArray=\"passes\"\n        args={[FXAAShader]}\n        material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\n        renderToScreen\n      />\n    </effectComposer>\n  )\n}\n","import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { useRef, useMemo, useState, useEffect } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport niceColors from 'nice-color-palettes'\nimport Effects from './Effects'\nimport './styles.css'\n\nconst tempObject = new THREE.Object3D()\nconst tempColor = new THREE.Color()\nconst data = Array.from({ length: 1000 }, () => ({ color: niceColors[17][Math.floor(Math.random() * 5)], scale: 1 }))\n\nfunction Boxes() {\n  const [hovered, set] = useState()\n  const colorArray = useMemo(() => Float32Array.from(new Array(1000).fill().flatMap((_, i) => tempColor.set(data[i].color).toArray())), [])\n  const meshRef = useRef()\n  const prevRef = useRef()\n  useEffect(() => void (prevRef.current = hovered), [hovered])\n  useFrame((state) => {\n    const time = state.clock.getElapsedTime()\n    meshRef.current.rotation.x = Math.sin(time / 4)\n    meshRef.current.rotation.y = Math.sin(time / 2)\n    let i = 0\n    for (let x = 0; x < 10; x++)\n      for (let y = 0; y < 10; y++)\n        for (let z = 0; z < 10; z++) {\n          const id = i++\n          tempObject.position.set(5 - x, 5 - y, 5 - z)\n          tempObject.rotation.y = Math.sin(x / 4 + time) + Math.sin(y / 4 + time) + Math.sin(z / 4 + time)\n          tempObject.rotation.z = tempObject.rotation.y * 2\n          if (hovered !== prevRef.Current) {\n            tempColor.set(id === hovered ? 'white' : data[id].color).toArray(colorArray, id * 3)\n            meshRef.current.geometry.attributes.color.needsUpdate = true\n          }\n          const scale = (data[id].scale = THREE.MathUtils.lerp(data[id].scale, id === hovered ? 3 : 1, 0.1))\n          tempObject.scale.setScalar(scale)\n          tempObject.updateMatrix()\n          meshRef.current.setMatrixAt(id, tempObject.matrix)\n        }\n    meshRef.current.instanceMatrix.needsUpdate = true\n  })\n  return (\n    <instancedMesh ref={meshRef} args={[null, null, 1000]} onPointerMove={(e) => set(e.instanceId)} onPointerOut={(e) => set(undefined)}>\n      <boxGeometry args={[0.6, 0.6, 0.6]}>\n        <instancedBufferAttribute attachObject={['attributes', 'color']} args={[colorArray, 3]} />\n      </boxGeometry>\n      <meshPhongMaterial vertexColors={THREE.VertexColors} />\n    </instancedMesh>\n  )\n}\n\nReactDOM.render(\n  <Canvas\n    linear\n    gl={{ antialias: false, alpha: false }}\n    camera={{ position: [0, 0, 15], near: 5, far: 20 }}\n    onCreated={({ gl }) => gl.setClearColor('#f0f0f0')}>\n    <ambientLight />\n    <pointLight position={[150, 150, 150]} intensity={0.55} />\n    <Boxes />\n    <Effects />\n  </Canvas>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}